const fs = require('fs')
class BestDB {
  constructor() {}

  /**
  * @param {String} key The Key For Data
  * @param {String} value The Value For Data
  */
  set(key, value) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (value == null) throw new TypeError("The value is not defined!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        file[key] = value;
        return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
      } else {
        if (!this.get(key2[0])) file[key2[0]] = {};
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        data[key2[1]] = value;
        file[key2[0]] = data;
        return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
      }
    } else {
      file[key] = value;
      return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
    }
  }

  /**
  * @param {String} key The Key For Data
  */

  has(key) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        return file[key] ? true : false;
      } else {
        const data = this.get(key2[0]);
        if (!data) return false;
        if (typeof(data) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) return false;
        return data[key2[1]] ? true : false;
      }
    } else {
      return file[key] ? true : false;
    }
  }

  /**
  * @param {String} key The Key For Data
  */

  delete(key) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        delete file[key];
        return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
      } else {
        if (!file[key2[0]]) return true;
        const data = file[key2[0]];
        if (typeof(data) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) return true;
        delete data[key2[1]];
        file[key2[0]] = data;
        return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
      }
    } else {
      delete file[key];
      return fs.writeFileSync(`database.json`, JSON.stringify(file, null, 1));
    }
  }

  /**
  * @param {String} key The Key For Data
  * @param {String | Number} element The Element You Want To Pull
  */

  pull(key, element) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (element == null) throw new TypeError("The element is not defined!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        if (!this.has(key)) return false;
        if (!Array.isArray(file[key])) return this.set(key, [value]);
        var array = [];
        file[key].forEach((e) => { if (e == element) return; array.push(e); });
        file[key] = array;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) data[key2[1]] = [];
        if (!Array.isArray(data[key2[1]])) data[key2[1]] = [];
        var array = [];
        data[key2[1]].forEach((e) => { if (e == element) return; array.push(e); });
        data[key2[1]] = array;
        file[key2[0]] = data;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      }
    } else {
      if (!this.has(key)) return false;
      if (!Array.isArray(file[key])) return this.set(key, [value]);
      var array = [];
      file[key].forEach((e) => { if (e == element) return; array.push(e); });
      file[key] = array;
      return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
    }
  }

  /**
  * @param {String} fileName Backup File Name
  */

  backup(fileName) {
    if (!fileName) throw new TypeError("The key is not defined!");
    if (typeof(fileName) != "string") throw new TypeError("The key must be string!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (fileName.includes("..")) {
      const newName = fileName.split("..");
      return fs.writeFileSync(`${newName}.json`, JSON.stringify(file, null, 1))
    } else return fs.writeFileSync(`${fileName}.json`, JSON.stringify(file, null, 1));
  }

  /**
  * @param {String} key The Key For Data
  * @param {Number} value The Value You Want To Add
  */

  add(key, value) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (value == null) throw new TypeError("The value is not defined!");
    if (isNaN(value)) throw new TypeError("The value must be a number!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        if (!this.has(key)) file[key] = 0;
        if (typeof(file[key]) != "number") throw new TypeError(`The \`${key}\` must be number!`);
        file[key] += value;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(data) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) data[key2[1]] = 0;
        if (typeof(data[key2[1]]) != "number") throw new TypeError(`The \`${key2[1]}\` must be number!`);
        data[key2[1]] += value;
        file[key2[0]] = data;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      }
    } else {
      if (!this.has(key)) file[key] = 0;
      if (typeof(file[key]) != "number") throw new TypeError(`The \`${key}\` must be number!`);
      file[key] += value;
      return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
    }
  }

  /**
  * @param {String} key The Key For Data
  * @param {Number} value The Value You Want To Subtract
  */

  subtract(key, value) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (value == null) throw new TypeError("The value is not defined!");
    if (isNaN(value)) throw new TypeError("The value must be a number!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        if (!this.has(key)) file[key] = 0;
        if (typeof(file[key]) != "number") throw new TypeError(`The \`${key}\` must be number!`);
        file[key] -= value;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) data[key2[1]] = 0;
        if (typeof(data[key2[1]]) != "number") throw new TypeError(`The \`${key2[1]}\` must be number!`);
        data[key2[1]] -= value;
        file[key2[0]] = data;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      }
    } else {
      if (!this.has(key)) file[key] = 0;
      if (typeof(file[key]) != "number") throw new TypeError(`The \`${key}\` must be number!`);
      file[key] -= value;
      return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
    }
  }

  /**
  * @param reset To Delete All Data
  */

  reset() {
    return fs.writeFileSync("database.json", JSON.stringify({}, null, 1));
  }

  /**
  * @param all To Get All Data
  * @param {String} ID The Key For Data
  * @param {String | Number} data The Value For Data
  */

  all() {
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    let keys = Object.keys(file);
    let res = [];
    for (let i = 0; i < keys.length; i++)
    res.push({ ID: keys[i], data: file[keys[i]] });
    return res;
  }

  /**
  * @param {String} key The Key For Data
  * @param {String | Number} value The Value You Want To Push
  */

  push(key, value) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (value == null) throw new TypeError("The value is not defined!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        let array = [];
        const data = this.get(key);
        if (!data) return this.set(key, [value]);
        if (Array.isArray(this.get(key))) {
          this.get(key).forEach((e) => { array.push(e); });
          array.push(value);
          return this.set(key, array);
        } else return this.set(key, [value]);
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) data[key2[1]] = [];
        if (!Array.isArray(data[key2[1]])) data[key2[1]] = [];
        data[key2[1]].push(value);
        file[key2[0]] = data;
        return fs.writeFileSync("database.json", JSON.stringify(file, null, 1));
      }
    } else {
      let array = [];
      const data = this.get(key);
      if (!data) return this.set(key, [value]);
      if (Array.isArray(this.get(key))) {
        this.get(key).forEach((e) => { array.push(e); });
        array.push(value);
        return this.set(key, array);
      } else return this.set(key, [value]);
    }
  }

  /**
  * @param {String} key The Key For Data
  */

  get(key) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        return file[key] ? file[key] : false;
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) return false;
        return data[key2[1]] ? data[key2[1]] : false;
      }
    } else {
      return file[key] ? file[key] : false;
    }
  }

  /**
  * @param {String} key The Key For Data
  */

  fetch(key) {
    if (!key) throw new TypeError("The key is not defined!");
    if (typeof(key) != "string") throw new TypeError("The key must be string!");
    if (!fs.existsSync(`database.json`)) fs.writeFileSync(`database.json`, "{}");
    const file = JSON.parse(fs.readFileSync(`database.json`, "utf8"));
    if (key.includes("..")) {
      const key2 = key.split("..");
      if (key2.length > 2) {
        return file[key] ? file[key] : false;
      } else {
        if (!file[key2[0]]) return false;
        const data = file[key2[0]];
        if (typeof(file[key2[0]]) != "object") throw new TypeError(`The data for \`${key2[0]}\` must be object`);
        if (!data[key2[1]]) return false;
        return data[key2[1]] ? data[key2[1]] : false;
      }
    } else {
      return file[key] ? file[key] : false;
    }
  }
}
module.exports = new BestDB();